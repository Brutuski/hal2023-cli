#!/usr/bin/env bash

## COLORS ##
BLACK='\033[0;30m'
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[0;37m'
RESET='\033[0m'

## Formatting ##

# Logo
readonly ASCII=$(
  cat <<EOF
██╗  ██╗ █████╗ ██╗         ██████╗  ██████╗ ██████╗ ██████╗
██║  ██║██╔══██╗██║         ╚════██╗██╔═████╗╚════██╗╚════██╗
███████║███████║██║          █████╔╝██║██╔██║ █████╔╝ █████╔╝
██╔══██║██╔══██║██║         ██╔═══╝ ████╔╝██║██╔═══╝  ╚═══██╗
██║  ██║██║  ██║███████╗    ███████╗╚██████╔╝███████╗██████╔╝
╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝    ╚══════╝ ╚═════╝ ╚══════╝╚═════╝
EOF
)

# Labels
readonly CHATGPT="${CYAN}\033[1mChatGPT\033[0m${RESET} \033[2m｢Turbo Model｣\033[0m:"
readonly CHATGPT_DAVINCI="${CYAN}\033[1mChatGPT\033[0m${RESET} \033[2m｢Davinci Model｣\033[0m:"
readonly CHATGPT_IMAGE="${CYAN}\033[1mChatGPT\033[0m${RESET} \033[2m｢Image｣\033[0m:"

# API Key ##
readonly API_KEY=$(<~/.chat-gpt-api)

# Default Parameters
TEMP=${TEMP:-0.8}
MAX_TOKENS=${MAX_TOKENS:-2048}
RESOLUTION=${RESOLUTION:-1024x1024}

# Date Time for the history file
readonly DATE_TIME=$(date +"%d-%m-%y at %H:%M")

# Prompts
#ROLE_SYSTEM="You are ChatGPT. Please answer each query in a precise and short manner. Don't show more than 10 items in a list."

# Logo printed when the script is executed
printf "\033c"
echo -e "\n${YELLOW}${ASCII}${RESET}\n"

# Checks for ChatGPT Error Message ##
function connection_error() {
  if echo "$1" | jq -e '' >/dev/null; then
    echo -e "\n${RED}Error:${RESET} Your message failed to reach Open AI's API."
    echo -e "Please check your API key to make sure it is correct.\n"
    exit 1
  fi
}

# Parses response from chatGPT using the gpt-3.5-turbo model##
function chat_response() {
  local input=$1
  local model="gpt-3.5-turbo"
  local response
  response=$(curl -sS https://api.openai.com/v1/chat/completions \
    -H "Authorization: Bearer $API_KEY" \
    -H "Content-Type: application/json" \
    -d '{
                    "model": "'"$model"'",
                    "messages": [
                                  {"role": "user", "content": "'"$input"'"}
                                ],
                    "max_tokens": '$MAX_TOKENS',
                    "temperature": '$TEMP'
                    }' | jq -r '.choices[].message.content' | sed '1,2d')

  connection_error "$response"
  echo -e "\n${CHATGPT} ${GREEN}${response}${RESET}"
  save_history "$input" "$response" "$model"
}

# Parses response from chatGPT using the text-davinci-003 model##
function chat_response_davinci() {
  local input=$1
  local model="text-davinci-003"
  local response
  response=$(curl -sS https://api.openai.com/v1/completions \
    -H 'Content-Type: application/json' \
    -H "Authorization: Bearer $API_KEY" \
    -d '{
    			"model": "'"$model"'",
    			"prompt": "'"$input"'",
    			"max_tokens": '$MAX_TOKENS',
    			"temperature": '$TEMP'
  	}' | jq -r '.choices[].text' | sed '1,2d')

  connection_error "$response"
  echo -e "\n${CHATGPT_DAVINCI} ${GREEN}${response}${RESET}"
  save_history "$input" "$response" "$model"
}

# Generates image
function image_generation() {
  local input=$1
  local success_message="URL was successfully generated."
  local model="DALL.E"
  local response
  response=$(curl -sS https://api.openai.com/v1/images/generations \
    -H 'Content-Type: application/json' \
    -H "Authorization: Bearer $API_KEY" \
    -d '{
          "prompt": "'"$input"'",
          "n": 1,
          "size": "'"$RESOLUTION"'"
    }')

  image_url=$(echo $response | jq -r '.data[0].url')
  if [ "$image_url" == null ]; then
    connection_error
  else
    echo -e "\n${CHATGPT_IMAGE} ${GREEN}Image was successfully generated${RESET}"
    echo -e "Link: $image_url"
    save_history "$input" "$success_message" "$model"
  fi
}

# Saves responses in a history file with timestamp
# ~/.hal2023_history.txt
# History file isn't deleted while uninstalling
function save_history() {
  local prompt=$1
  local reply=$2
  local model=$3
  echo -e "\n-----------------\n$DATE_TIME\n\nUser: $prompt \n\nChatGPT [$model] - $reply" >>~/.hal2023_history.txt
}

# Check for a History File
if [ ! -f ~/.hal2023_history.txt ]; then
  touch ~/.hal2023_history.txt
fi

while true; do
  echo -e "\n\033[2mType exit, quit or :q to exit.\033[0m"
  echo -e "${WHITE}Write a message...${RESET}"
  read -r input

  if [ "$input" == "exit" ] || [ "$input" == "quit" ] || [ "$input" == ":q" ]; then
    echo -e "\nSuccessfuly quit HAL2023\n"
    exit 0
  elif [[ "$input" == "-davinci"* ]]; then
    davinciQuery=$(echo "$input" | cut -c 9-)
    chat_response_davinci "$davinciQuery"
  elif [[ "$input" == "-image"* ]]; then
    image_generation "${input#*-image }"
  else
    chat_response "$input"
  fi
done
